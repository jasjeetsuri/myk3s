apiVersion: v1
kind: Namespace
metadata:
  name: immich

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: immich-db-pv
  namespace: immich
  labels:
    app: immich-postgresql
spec:
  capacity:
    storage: 10Gi  # Adjust the storage size as needed
  accessModes:
    - ReadWriteMany
  nfs:
    path: /k3s/projects/immich  # Static path on the NFS server
    server: 192.168.1.238               # Your NFS server's IP
  persistentVolumeReclaimPolicy: Retain

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: immich-library-pv
  namespace: immich
  labels:
    app: immich
spec:
  capacity:
    storage: 100Gi  # Adjust the storage size as needed
  accessModes:
    - ReadWriteMany
  nfs:
    path: /k3s/projects/immich  # Static path on the NFS server
    server: 192.168.1.238               # Your NFS server's IP
  persistentVolumeReclaimPolicy: Retain

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: ext-immich-library-pv
  namespace: immich
  labels:
    app: immich
spec:
  capacity:
    storage: 100Gi  # Adjust the storage size as needed
  accessModes:
    - ReadOnlyMany
  nfs:
    path: /k3s/projects/nextcloud/data/jasjeet/files/Photos # Static path on the NFS server
    server: 192.168.1.238               # Your NFS server's IP
  persistentVolumeReclaimPolicy: Retain


---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: immich-db-pvc
  namespace: immich
  labels:
    app: immich
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi  # Match or be less than the PV's capacity
  volumeName: immich-db-pv  # Bind explicitly to the PV created above
  storageClassName: ''

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: immich-library-pvc
  namespace: immich
  labels:
    app: immich
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi  # Match or be less than the PV's capacity
  volumeName: immich-library-pv  # Bind explicitly to the PV created above
  storageClassName: ''

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: ext-immich-library-pvc
  namespace: immich
  labels:
    app: immich
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 100Gi  # Match or be less than the PV's capacity
  volumeName: ext-immich-library-pv  # Bind explicitly to the PV created above
  storageClassName: ''

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: immich-env
  namespace: immich
  labels:
    app: immich
data:
  DB_DATABASE_NAME: "immich"
  DB_HOSTNAME: "immich-database"
  DB_USERNAME: "immich"
  IMMICH_MACHINE_LEARNING_URL: "http://immich-machine-learning:3003"
  REDIS_HOSTNAME: "redis.nextcloud.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DBINDEX: "0"
  REDIS_PASSWORD: ""
  DISABLE_REVERSE_GEOCODING: "false"
  REVERSE_GEOCODING_PRECISION: "2"
  PUBLIC_LOGIN_PAGE_MESSAGE: ""
  PUID: "0"
  PGID: "0"
  DB_PASSWORD: "password"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-database
  namespace: immich
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-database
  template:
    metadata:
      labels:
        app: immich-database
    spec:
      containers:
        - name: immich-postgres
          image: "docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources: {}
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: immich-db-pvc

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-server
  namespace: immich
  labels:
    app: immich-server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [{
            "name": "multus-iot",
            "namespace": "default",
            "mac": "2e:f8:57:99:6e:31",
            "ips": ["192.168.1.192/24"]
          }]
    spec:
      securityContext:
        fsGroup: 0
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      initContainers:
        - name: postgresql-isready
          image: "docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0"
          imagePullPolicy: Always
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}"
              -h immich-database -p 5432 ; do sleep 2 ; done
      containers:
        - name: immich-server
          image: "ghcr.io/immich-app/immich-server:release"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 3001
          env:
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_PASSWORD
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /server-info/ping
              port: 3001
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /server-info/ping
              port: 3001
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: library
              mountPath: /usr/src/app/upload
              subPath: library
            - name: ext-library
              mountPath: /photos
              subPath: icloud_photos
          resources: {}
      volumes:
        - name: library
          persistentVolumeClaim:
            claimName: immich-library-pvc
        - name: ext-library
          persistentVolumeClaim:
            claimName: ext-immich-library-pvc
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-machine-learning
  namespace: immich
  labels:
    app: immich-machine-learning
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      securityContext:
        fsGroup: 0
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-machine-learning
          image: "ghcr.io/immich-app/immich-machine-learning:release"
          imagePullPolicy: Always
          ports:
            - containerPort: 3003
          env:
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_PASSWORD
            - name: TRANSFORMERS_CACHE
              value: /cache
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 3003
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: 3003
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: cache
              mountPath: /cache
          resources: {}
      volumes:
        - name: cache
          emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: immich-database
  namespace: immich
  labels:
    app: immich-database
spec:
  type: ClusterIP
  selector:
    app: immich-database
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: 5432

---
kind: Service
apiVersion: v1
metadata:
  name: immich-machine-learning
  namespace: immich
  labels:
    app: immich-machine-learning
spec:
  type: ClusterIP
  selector:
    app: immich-machine-learning
  ports:
    - port: 3003
      targetPort: 3003
      protocol: TCP

---
kind: Service
apiVersion: v1
metadata:
  name: immich-server
  namespace: immich
  labels:
    app: immich-server
spec:
  type: ClusterIP
  selector:
    app: immich-server
  ports:
    - port: 3001
      targetPort: 3001
      protocol: TCP

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: immich-private
  namespace: immich
  annotations:
    kubernetes.io/ingress.class: traefik
  labels:
    app: immich
spec:
  rules:
  - host: immich.jsuri.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: immich-server
            port:
              number: 3001
